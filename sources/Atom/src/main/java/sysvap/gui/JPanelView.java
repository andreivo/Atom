/*
 * *****************************************************************************
 *               MCTI - Ministério da Ciência, Tecnologia e Inovação             
 *                INPE - Instituto Nacional de Pesquisas Espaciais               
 * -----------------------------------------------------------------------------
 * André Aparecido de S. Ivo <andre.ivo@inpe.br>        
 * *****************************************************************************
 */

/*
 * JPanelVisualizacao.java
 *
 * Created on Dec 7, 2012, 4:45:58 PM
 */
package sysvap.gui;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import sysvap.gui.core.data.SysGUIMEF;
import sysvap.gui.core.data.SysGUIProject;
import sysvap.gui.core.data.SysGUIState;
import sysvap.gui.drawer.SysDrawer;
import sysvap.gui.helper.SysActionsGUI;
import sysvap.gui.helper.SysConstants;
import sysvap.gui.helper.SysDrawerHelper;
import sysvap.gui.messages.SysGUIMessages;
import sysvap.gui.messages.SysTypeGUIMessages;

/**
 *
 * @author Usuario
 */
public class JPanelView extends JPanel implements MouseListener, MouseMotionListener {
    
    private SysGUIMEF sysMEF;
    private int screeanX;
    private int screeanY;
    private JTabbedPane tbsPrincipal;
    private SysView form;

    /**
     * Creates new form JPanelVisualizacao
     */
    public JPanelView(SysView form, JTabbedPane tbsPrincipal, String nameMEF) {
        initComponents();
        setDoubleBuffered(true);
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        this.setFocusable(true);
        this.tbsPrincipal = tbsPrincipal;
        this.form = form;
        
        sysMEF = SysGUIProject.getInstance().addMEF(nameMEF);
        SysGUIProject.getInstance().setSelectedMEF(getSysMEF());
        if (SysGUIProject.getInstance().getBackgroundColor() != null) {
            this.setBackground(SysGUIProject.getInstance().getBackgroundColor());
        }
    }
    
    public JPanelView(SysView form, JTabbedPane tbsPrincipal, SysGUIMEF sysMEF) {
        initComponents();
        setDoubleBuffered(true);
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        this.setFocusable(true);
        this.tbsPrincipal = tbsPrincipal;
        this.form = form;
        this.sysMEF = sysMEF;
        setFocusTraversalKeysEnabled(false);
        
        SysGUIProject.getInstance().setSelectedMEF(getSysMEF());
        if (SysGUIProject.getInstance().getBackgroundColor() != null) {
            this.setBackground(SysGUIProject.getInstance().getBackgroundColor());
        }
    }
    
    public SysGUIMEF getSysMEF() {
        return sysMEF;
    }
    
    public void setSysMEF(SysGUIMEF sysMEF) {
        this.sysMEF = sysMEF;
    }
    
    public int getScreeanX() {
        return screeanX;
    }
    
    public void setScreeanX(int screeanX) {
        this.screeanX = screeanX;
    }
    
    public int getScreeanY() {
        return screeanY;
    }
    
    public void setScreeanY(int screeanY) {
        this.screeanY = screeanY;
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Font ftEvent = new Font("Arial", Font.PLAIN, 12);
        g.setFont(ftEvent);
        
        SysGUIProject.getInstance().setSelectedMEF(getSysMEF());

        //Pinta os estados        
        SysDrawer.paintStates(this, g, form);
        SysDrawer.paintTransitions(this, g);

        //Altera os estados selecionados para exibir as propriedades.    
        //getForm().getjPropertyEditor().setObjExplore(getSysMEF().getSelectedObject());
    }
    
    public JTabbedPane getTbsPrincipal() {
        return tbsPrincipal;
    }
    
    public void setTbsPrincipal(JTabbedPane tbsPrincipal) {
        this.tbsPrincipal = tbsPrincipal;
    }
    
    public SysView getForm() {
        return form;
    }
    
    public void setForm(SysView form) {
        this.form = form;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sysvap.SysApp.class).getContext().getResourceMap(JPanelView.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setTitle() {
        if (SysGUIProject.getInstance().getChanged()) {
            String nameProject = SysConstants.NAME_DEFAULT_PROJECT;
            if (SysGUIProject.getInstance().getNameProject() != null) {
                nameProject = SysGUIProject.getInstance().getNameProject();
            }
            getForm().getFrame().setTitle("Atom 1.1 - " + nameProject + " (*)");
        }
    }
    
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_DELETE:
                SysActionsGUI.deleteObjectsMEF(getForm(), getTbsPrincipal());
                break;
            case KeyEvent.VK_C:
                if (evt.isControlDown()) {
                    SysActionsGUI.copyState();
                }
                break;
            case KeyEvent.VK_V:
                if (evt.isControlDown()) {
                    SysActionsGUI.pasteState(getTbsPrincipal(), getForm());
                }
                break;
            case KeyEvent.VK_S:
                if (evt.isControlDown() && evt.isShiftDown()) {
                    SysActionsGUI.SaveAsProject(getForm());
                } else if (evt.isControlDown()) {
                    SysActionsGUI.SaveProject(getForm());
                }
                break;
            case KeyEvent.VK_O:
                if (evt.isControlDown()) {
                    SysActionsGUI.OpenProject(getForm(), getTbsPrincipal());
                }
                break;
            case KeyEvent.VK_N:
                if (evt.isControlDown()) {
                    SysActionsGUI.newProject(getForm(), getTbsPrincipal(), true);
                }
                break;
            case KeyEvent.VK_INSERT:
                sysMEF.addState(25, 25);
                repaint();
                break;
            case KeyEvent.VK_F5:
                SysActionsGUI.execSimulation(getForm());
                break;
        }
        setTitle();
        getForm().getjPropertyEditor().setObjExplore(getSysMEF().getSelectedObject());
    }//GEN-LAST:event_formKeyReleased
    
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                if (evt.isShiftDown()) {
                    SysActionsGUI.selectNextState(getTbsPrincipal());
                } else {
                    if (evt.isControlDown()) {
                        SysActionsGUI.moveStateToRight(1, getTbsPrincipal());
                    } else {
                        SysActionsGUI.moveStateToRight(10, getTbsPrincipal());
                    }
                }
                break;
            case KeyEvent.VK_LEFT:
                if (evt.isShiftDown()) {
                    SysActionsGUI.selectPreviusState(getTbsPrincipal());
                } else {
                    if (evt.isControlDown()) {
                        SysActionsGUI.moveStateToLeft(1, getTbsPrincipal());
                    } else {
                        SysActionsGUI.moveStateToLeft(10, getTbsPrincipal());
                    }
                }
                break;
            case KeyEvent.VK_UP:
                if (evt.isShiftDown()) {
                    SysActionsGUI.selectNextState(getTbsPrincipal());
                } else {
                    if (evt.isControlDown()) {
                        SysActionsGUI.moveStateToUp(1, getTbsPrincipal());
                    } else {
                        SysActionsGUI.moveStateToUp(10, getTbsPrincipal());
                    }
                }
                break;
            case KeyEvent.VK_DOWN:
                if (evt.isShiftDown()) {
                    SysActionsGUI.selectNextState(getTbsPrincipal());
                } else {
                    if (evt.isControlDown()) {
                        SysActionsGUI.moveStateToDown(1, getTbsPrincipal());
                    } else {
                        SysActionsGUI.moveStateToDown(10, getTbsPrincipal());
                    }
                }
                break;
        }
        setTitle();
    }//GEN-LAST:event_formKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void mouseDragged(MouseEvent e) {
        switch (SysGUIProject.getInstance().getSelectedTool()) {
            case TOOL_MOUSE:
                toolMouseDragged(e);
                break;
            case TOOL_ADD_STATE:
                break;
            case TOOL_ADD_TRANSITION:
                toolAddTransitionDragged(e);
                break;
            case TOOL_DELETE:
                break;
            default:
                break;
        }
        repaint();
        setTitle();
    }
    
    private void toolMouseDragged(MouseEvent e) {
        int _ballX = SysDrawerHelper.getCenterMouse(e.getX());
        int _ballY = SysDrawerHelper.getCenterMouse(e.getY());
        //--- Don't move the ball off the left screen
        _ballX = Math.max(_ballX, 0);
        //--- Don't move the ball off top
        _ballY = Math.max(_ballY, 0);
        getSysMEF().sendSysGUIMessages(new SysGUIMessages(SysTypeGUIMessages.TOOLMOUSE_MOUSEDRAGGED, _ballX, _ballY));
        setTitle();
    }
    
    private void toolAddTransitionDragged(MouseEvent e) {
        int _ballX = e.getX();
        int _ballY = e.getY();
        //--- Don't move the ball off the left screen
        _ballX = Math.max(_ballX, 0);
        //--- Don't move the ball off top
        _ballY = Math.max(_ballY, 0);
        
        setScreeanX(_ballX);
        setScreeanY(_ballY);
        setTitle();
    }
    
    public void mousePressed(MouseEvent e) {
        switch (SysGUIProject.getInstance().getSelectedTool()) {
            case TOOL_MOUSE:
                toolMousePressed(e);
                break;
            case TOOL_ADD_STATE:
                toolAddStateMousePressed(e);
                break;
            case TOOL_ADD_TRANSITION:
                toolAddTransictionMousePressed(e);
                break;
            case TOOL_DELETE:
                break;
            default:
                break;
        }
        repaint();
        setTitle();
        requestFocusInWindow();
    }
    
    private void toolMousePressed(MouseEvent e) {
        getSysMEF().sendSysGUIMessages(new SysGUIMessages(SysTypeGUIMessages.TOOLMOUSE_MOUSEPRESSED, e.getX(), e.getY(),
                this.getGraphics().getFontMetrics()));
        setTitle();
    }
    
    private void toolAddStateMousePressed(MouseEvent e) {
        SysActionsGUI.addState(getForm(), this, e.getX(), e.getY());
    }
    
    private void toolAddTransictionMousePressed(MouseEvent e) {
        if (getSysMEF().getStateInCoordenate(e.getX(), e.getY()) != null) {
            getSysMEF().updateTransitionOUT(e.getX(), e.getY());
        }
        setTitle();
    }
    
    public void mouseReleased(MouseEvent e) {
        switch (SysGUIProject.getInstance().getSelectedTool()) {
            case TOOL_MOUSE:
                break;
            case TOOL_ADD_STATE:
                break;
            case TOOL_ADD_TRANSITION:
                toolAddTransictionMouseRelease(e);
                break;
            case TOOL_DELETE:
                break;
            default:
                break;
        }
        repaint();
        setTitle();
        getForm().getjPropertyEditor().setObjExplore(getSysMEF().getSelectedObject());
    }
    
    private void toolAddTransictionMouseRelease(MouseEvent e) {
        if (getSysMEF().getStateInCoordenate(e.getX(), e.getY()) != null) {
            getSysMEF().updateTransitionIN(e.getX(), e.getY());
            
            SysGUIState stateTranIN = getSysMEF().getStateInCoordenate((int) getSysMEF().getPointStateTransitionIN().getX(), (int) getSysMEF().getPointStateTransitionIN().getY());
            SysGUIState stateTranOUT = getSysMEF().getStateInCoordenate((int) getSysMEF().getPointStateTransitionOUT().getX(), (int) getSysMEF().getPointStateTransitionOUT().getY());
            
            stateTranOUT.addSysTransition(stateTranIN, "");
        }
        getSysMEF().setPointStateTransitionIN(null);
        getSysMEF().setPointStateTransitionOUT(null);
        setTitle();
    }
    
    public void mouseExited(MouseEvent me) {
    }
    
    public void mouseEntered(MouseEvent me) {
    }
    
    public void mouseClicked(MouseEvent me) {
    }
    
    public void mouseMoved(MouseEvent me) {
        setScreeanX(me.getX());
        setScreeanY(me.getY());
    }
    
    public void focusGained(FocusEvent fe) {
    }
    
    public void focusLost(FocusEvent fe) {
    }
}
